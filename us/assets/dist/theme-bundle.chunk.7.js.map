{"version":3,"sources":["webpack:///./assets/js/theme/auth.js","webpack:///./node_modules/lodash/toString.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/utils/form-utils.js","webpack:///./node_modules/lodash/capitalize.js","webpack:///./node_modules/lodash/_hasUnicode.js","webpack:///./node_modules/lodash/includes.js","webpack:///./assets/js/theme/common/utils/translations-utils.js","webpack:///./node_modules/lodash/camelCase.js","webpack:///./node_modules/lodash/_baseIndexOf.js","webpack:///./node_modules/lodash/upperFirst.js","webpack:///./node_modules/lodash/_createCaseFirst.js","webpack:///./node_modules/lodash/_castSlice.js","webpack:///./node_modules/lodash/_baseSlice.js","webpack:///./node_modules/lodash/_stringToArray.js","webpack:///./node_modules/lodash/_asciiToArray.js","webpack:///./node_modules/lodash/_unicodeToArray.js","webpack:///./node_modules/lodash/_createCompounder.js","webpack:///./node_modules/lodash/_arrayReduce.js","webpack:///./node_modules/lodash/deburr.js","webpack:///./node_modules/lodash/_baseToString.js","webpack:///./node_modules/lodash/words.js","webpack:///./node_modules/lodash/_asciiWords.js","webpack:///./node_modules/lodash/_hasUnicodeWord.js","webpack:///./node_modules/lodash/_unicodeWords.js","webpack:///./node_modules/lodash/_baseIteratee.js","webpack:///./node_modules/lodash/keys.js","webpack:///./node_modules/lodash/_baseCreate.js","webpack:///./assets/js/theme/common/state-country.js","webpack:///./node_modules/lodash/each.js","webpack:///./node_modules/lodash/transform.js","webpack:///./node_modules/lodash/_arrayEach.js","webpack:///./node_modules/lodash/_baseForOwn.js","webpack:///./node_modules/lodash/_baseFor.js","webpack:///./node_modules/lodash/_createBaseFor.js","webpack:///./assets/js/theme/common/form-validation.js"],"names":["Auth","_PageManager","context","_this","call","validationDictionary","createTranslationDictionary","formCreateSelector","_proto","prototype","registerLoginValidation","$loginForm","_this2","loginModel","forms","this","loginValidator","nod","submit","add","selector","validate","cb","val","email","errorMessage","useValidEmail","password","enterPass","on","event","performCheck","areAll","preventDefault","registerForgotPasswordValidation","$forgotPasswordForm","_this3","forgotPasswordValidator","registerNewPasswordValidation","_this$validationDicti","enterPassword","matchPassword","password_match","invalidPassword","invalid_password","newPasswordValidator","$","newPasswordForm","passwordSelector","password2Selector","errorTextMessages","createPasswordValidationErrorTextObject","Validators","setPasswordValidation","passwordRequirements","registerCreateAccountValidator","$createAccountForm","$last","_this4","validationModel","validation","createAccountValidator","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","stateCountry","err","field","Error","$field","getStatus","remove","is","setStateCountryValidation","field_not_blank","cleanUpStateValidation","setEmailValidation","valid_email","_this$validationDicti2","onReady","classifyForm","$newPasswordForm","length","PageManager","module","exports","value","test","notEmpty","inputTagNames","empty","confirm","mismatch","invalid","onEmptyPasswordErrorText","onConfirmPasswordErrorText","onMismatchPasswordErrorText","onNotValidPasswordErrorText","formSelector","options","$form","$inputs","find","join","_options$formFieldCla","formFieldClass","each","__","input","specificClassName","$input","$formField","parent","tagName","prop","toLowerCase","className","inputType","_includes","_camelCase","_capitalize","addClass","classifyInput","insertStateHiddenField","$stateField","stateFieldAttrs","type","name","fieldId","match","getFieldId","after","validator","errorText","requirements","_ref","isOptional","$password","passwordValidations","result","RegExp","alpha","numeric","minlength","setMinMaxPriceValidation","selectors","priceValidationErrorTexts","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","_priceValidationError","onMinPriceError","onMaxPriceError","minPriceNotEntered","maxPriceNotEntered","onInvalidPrice","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","$fieldClassElement","data","Object","keys","classes","forEach","hasClass","removeClass","toString","upperFirst","string","reHasUnicode","baseIndexOf","array","isTranslationDictionaryNotEmpty","dictionary","activeDictionary","i","arguments","JSON","parse","undefined","chooseActiveDictionary","validationDictionaryJSON","validationFallbackDictionaryJSON","validationDefaultDictionaryJSON","localizations","values","map","key","split","pop","reduce","acc","capitalize","camelCase","createCompounder","word","index","fromIndex","createCaseFirst","castSlice","hasUnicode","stringToArray","methodName","strSymbols","chr","charAt","trailing","slice","baseSlice","start","end","Array","asciiToArray","unicodeToArray","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","rsSymbol","reUnicode","arrayReduce","deburr","words","reApos","callback","replace","iteratee","accumulator","initAccum","baseToString","asciiWords","hasUnicodeWord","unicodeWords","pattern","guard","reAsciiWord","reHasUnicodeWord","rsBreakRange","rsMathOpRange","rsBreak","rsDigits","rsDingbat","rsLower","rsMisc","rsUpper","rsMiscLower","rsMiscUpper","rsModifier","rsEmoji","reUnicodeWord","nativeKeys","overArg","isObject","objectCreate","create","baseCreate","object","proto","stateElement","countryName","currentTarget","utils","api","country","getByName","response","showAlertModal","state_error","$currentInput","_isEmpty","states","newElement","attrs","_transform","item","ret","replacementAttributes","id","class","replaceWith","$newElement","prev","hide","makeStateOptional","$selectElement","$hiddenInput","append","required","show","makeStateRequired","statesArray","container","push","prefix","_each","stateObj","useIdForStates","html","addOptions","arrayEach","baseForOwn","baseIteratee","getPrototype","isArray","isBuffer","isFunction","isTypedArray","isArr","isArrLike","Ctor","constructor","baseFor","createBaseFor","fromRight","keysFunc","iterable","props","buildValidation","$validateableElement","formFieldId","secondarySelector","fieldValidations","formFieldSelector","attr","dateValidation","min_date","max_date","invalidMessage","formElementId","minSplit","maxSplit","minDate","Date","maxDate","triggeredBy","day","Number","month","year","chosenDate","buildDateValidation","element","$inputElement","get","inputName","elementSelector","label","min","max","numberVal","buildNumberRangeValidation","buildRequiredValidation","checkbox","checked","validationsToPerform","requiredFieldValidationText","requiredValidationMessage","first","concat"],"mappings":"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","file":"theme-bundle.chunk.7.js","sourcesContent":["import PageManager from './page-manager';\nimport stateCountry from './common/state-country';\nimport nod from './common/nod';\nimport validation from './common/form-validation';\nimport forms from './common/models/forms';\nimport { classifyForm, Validators, createPasswordValidationErrorTextObject } from './common/utils/form-utils';\nimport { createTranslationDictionary } from './common/utils/translations-utils';\n\nexport default class Auth extends PageManager {\n    constructor(context) {\n        super(context);\n        this.validationDictionary = createTranslationDictionary(context);\n        this.formCreateSelector = 'form[data-create-account-form]';\n    }\n\n    registerLoginValidation($loginForm) {\n        const loginModel = forms;\n\n        this.loginValidator = nod({\n            submit: '.login-form input[type=\"submit\"]',\n        });\n\n        this.loginValidator.add([\n            {\n                selector: '.login-form input[name=\"login_email\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n            {\n                selector: '.login-form input[name=\"login_pass\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.password(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterPass,\n            },\n        ]);\n\n        $loginForm.on('submit', event => {\n            this.loginValidator.performCheck();\n\n            if (this.loginValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerForgotPasswordValidation($forgotPasswordForm) {\n        this.forgotPasswordValidator = nod({\n            submit: '.forgot-password-form input[type=\"submit\"]',\n        });\n\n        this.forgotPasswordValidator.add([\n            {\n                selector: '.forgot-password-form input[name=\"email\"]',\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n        ]);\n\n        $forgotPasswordForm.on('submit', event => {\n            this.forgotPasswordValidator.performCheck();\n\n            if (this.forgotPasswordValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerNewPasswordValidation() {\n        const { password: enterPassword, password_match: matchPassword, invalid_password: invalidPassword } = this.validationDictionary;\n        const newPasswordForm = '.new-password-form';\n        const newPasswordValidator = nod({\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\n        });\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\n        const errorTextMessages = createPasswordValidationErrorTextObject(enterPassword, enterPassword, matchPassword, invalidPassword);\n        Validators.setPasswordValidation(\n            newPasswordValidator,\n            passwordSelector,\n            password2Selector,\n            this.passwordRequirements,\n            errorTextMessages,\n        );\n    }\n\n    registerCreateAccountValidator($createAccountForm) {\n        const validationModel = validation($createAccountForm, this.context);\n        const createAccountValidator = nod({\n            submit: `${this.formCreateSelector} input[type='submit']`,\n        });\n        const $stateElement = $('[data-field-type=\"State\"]');\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\n        const $emailElement = $(emailSelector);\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\n        const $passwordElement = $(passwordSelector);\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\n        const $password2Element = $(password2Selector);\n\n        createAccountValidator.add(validationModel);\n\n        if ($stateElement) {\n            let $last;\n\n            // Requests the states for a country with AJAX\n            stateCountry($stateElement, this.context, (err, field) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                const $field = $(field);\n\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\n                    createAccountValidator.remove($stateElement);\n                }\n\n                if ($last) {\n                    createAccountValidator.remove($last);\n                }\n\n                if ($field.is('select')) {\n                    $last = field;\n                    Validators.setStateCountryValidation(createAccountValidator, field, this.validationDictionary.field_not_blank);\n                } else {\n                    Validators.cleanUpStateValidation(field);\n                }\n            });\n        }\n\n        if ($emailElement) {\n            createAccountValidator.remove(emailSelector);\n            Validators.setEmailValidation(createAccountValidator, emailSelector, this.validationDictionary.valid_email);\n        }\n\n        if ($passwordElement && $password2Element) {\n            const { password: enterPassword, password_match: matchPassword, invalid_password: invalidPassword } = this.validationDictionary;\n\n            createAccountValidator.remove(passwordSelector);\n            createAccountValidator.remove(password2Selector);\n            Validators.setPasswordValidation(\n                createAccountValidator,\n                passwordSelector,\n                password2Selector,\n                this.passwordRequirements,\n                createPasswordValidationErrorTextObject(enterPassword, enterPassword, matchPassword, invalidPassword),\n            );\n        }\n\n        $createAccountForm.on('submit', event => {\n            createAccountValidator.performCheck();\n\n            if (createAccountValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    /**\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\n     */\n    onReady() {\n        const $createAccountForm = classifyForm(this.formCreateSelector);\n        const $loginForm = classifyForm('.login-form');\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\n\n        // Injected via auth.html\n        this.passwordRequirements = this.context.passwordRequirements;\n\n        if ($loginForm.length) {\n            this.registerLoginValidation($loginForm);\n        }\n\n        if ($newPasswordForm.length) {\n            this.registerNewPasswordValidation();\n        }\n\n        if ($forgotPasswordForm.length) {\n            this.registerForgotPasswordValidation($forgotPasswordForm);\n        }\n\n        if ($createAccountForm.length) {\n            this.registerCreateAccountValidator($createAccountForm);\n        }\n    }\n}\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import _ from 'lodash';\nimport nod from '../nod';\nimport forms from '../models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n/**\n * Set up Object with Error Messages on Password Validation. Please use messages in mentioned order\n * @param {string} empty defines error text for empty field\n * @param {string} confirm defines error text for empty confirmation field\n * @param {string} mismatch defines error text if confirm passford mismatches passford field\n * @param {string} invalid defines error text for invalid password charaters sequence\n * @return {object} messages or default texts if nothing is providing\n */\nexport const createPasswordValidationErrorTextObject = (empty, confirm, mismatch, invalid) => ({\n    onEmptyPasswordErrorText: empty,\n    onConfirmPasswordErrorText: confirm,\n    onMismatchPasswordErrorText: mismatch,\n    onNotValidPasswordErrorText: invalid,\n});\n\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     * @param {string} errorText describes errorMassage on email validation\n     */\n    setEmailValidation: (validator, field, errorText) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: errorText,\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param {object} errorTextsObject\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, {\n        onEmptyPasswordErrorText, onConfirmPasswordErrorText, onMismatchPasswordErrorText, onNotValidPasswordErrorText,\n    }, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onEmptyPasswordErrorText,\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onNotValidPasswordErrorText,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onConfirmPasswordErrorText,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: onMismatchPasswordErrorText,\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors, priceValidationErrorTexts = {}) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        // eslint-disable-next-line object-curly-newline\n        const { onMinPriceError, onMaxPriceError, minPriceNotEntered, maxPriceNotEntered, onInvalidPrice } = priceValidationErrorTexts;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: onMinPriceError,\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: onMaxPriceError,\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: maxPriceNotEntered,\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: minPriceNotEntered,\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: onInvalidPrice,\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field, errorText) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: errorText,\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField };\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","const TRANSLATIONS = 'translations';\nconst isTranslationDictionaryNotEmpty = (dictionary) => !!Object.keys(dictionary[TRANSLATIONS]).length;\nconst chooseActiveDictionary = (...dictionaryJsonList) => {\n    for (let i = 0; i < dictionaryJsonList.length; i++) {\n        const dictionary = JSON.parse(dictionaryJsonList[i]);\n        if (isTranslationDictionaryNotEmpty(dictionary)) {\n            return dictionary;\n        }\n    }\n};\n\n/**\n * defines Translation Dictionary to use\n * @param context provides access to 3 validation JSONs from en.json:\n * validation_messages, validation_fallback_messages and default_messages\n * @returns {Object}\n */\nexport const createTranslationDictionary = (context) => {\n    const { validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON } = context;\n    const activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);\n    const localizations = Object.values(activeDictionary[TRANSLATIONS]);\n    const translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(key => key.split('.').pop());\n\n    return translationKeys.reduce((acc, key, i) => {\n        acc[key] = localizations[i];\n        return acc;\n    }, {});\n};\n","var capitalize = require('./capitalize'),\n    createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\nvar camelCase = createCompounder(function(result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n\nmodule.exports = camelCase;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;\n","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n","/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;\n","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","import utils from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport { insertStateHiddenField } from './utils/form-utils';\nimport { showAlertModal } from '../global/modal';\n\n/**\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\n * @returns {jQuery|HTMLElement}\n */\nfunction makeStateRequired(stateElement, context) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n        return ret;\n    });\n\n    const replacementAttributes = {\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-select',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\n\n    if ($hiddenInput.length !== 0) {\n        $hiddenInput.remove();\n    }\n\n    if ($newElement.prev().find('small').length === 0) {\n        // String is injected from localizer\n        $newElement.prev().append(`<small>${context.required}</small>`);\n    } else {\n        $newElement.prev().find('small').show();\n    }\n\n    return $newElement;\n}\n\n/**\n * If a country with states is the default, a select will be sent,\n * In this case we need to be able to switch to an input field and hide the required field\n */\nfunction makeStateOptional(stateElement) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n\n        return ret;\n    });\n\n    const replacementAttributes = {\n        type: 'text',\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-input',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<input />', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n\n    if ($newElement.length !== 0) {\n        insertStateHiddenField($newElement);\n        $newElement.prev().find('small').hide();\n    }\n\n    return $newElement;\n}\n\n/**\n * Adds the array of options from the remote request to the newly created select box.\n * @param {Object} statesArray\n * @param {jQuery} $selectElement\n * @param {Object} options\n */\nfunction addOptions(statesArray, $selectElement, options) {\n    const container = [];\n\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\n\n    if (!_.isEmpty($selectElement)) {\n        _.each(statesArray.states, (stateObj) => {\n            if (options.useIdForStates) {\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\n            } else {\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\n            }\n        });\n\n        $selectElement.html(container.join(' '));\n    }\n}\n\n/**\n *\n * @param {jQuery} stateElement\n * @param {Object} context\n * @param {Object} options\n * @param {Function} callback\n */\nexport default function (stateElement, context = {}, options, callback) {\n    /**\n     * Backwards compatible for three parameters instead of four\n     *\n     * Available options:\n     *\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\n     */\n    if (typeof options === 'function') {\n        /* eslint-disable no-param-reassign */\n        callback = options;\n        options = {};\n        /* eslint-enable no-param-reassign */\n    }\n\n    $('select[data-field-type=\"Country\"]').on('change', event => {\n        const countryName = $(event.currentTarget).val();\n\n        if (countryName === '') {\n            return;\n        }\n\n        utils.api.country.getByName(countryName, (err, response) => {\n            if (err) {\n                showAlertModal(context.state_error);\n                return callback(err);\n            }\n\n            const $currentInput = $('[data-field-type=\"State\"]');\n\n            if (!_.isEmpty(response.data.states)) {\n                // The element may have been replaced with a select, reselect it\n                const $selectElement = makeStateRequired($currentInput, context);\n\n                addOptions(response.data, $selectElement, options);\n                callback(null, $selectElement);\n            } else {\n                const newElement = makeStateOptional($currentInput, context);\n\n                callback(null, newElement);\n            }\n        });\n    });\n}\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","import { createTranslationDictionary } from './utils/translations-utils';\n\n/**\n * Validate that the given date for the day/month/year select inputs is within potential range\n * @param $formField\n * @param validation\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\n */\nfunction buildDateValidation($formField, validation) {\n    // No date range restriction, skip\n    if (validation.min_date && validation.max_date) {\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\n        const formElementId = $formField.attr('id');\n        const minSplit = validation.min_date.split('-');\n        const maxSplit = validation.max_date.split('-');\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\n\n        return {\n            selector: `#${formElementId} select[data-label=\"year\"]`,\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\n            validate: (cb, val) => {\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\n                const year = Number(val);\n                const chosenDate = new Date(year, month, day);\n\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\n            },\n            errorMessage: invalidMessage,\n        };\n    }\n}\n\n/**\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\n * from many different inputs\n * @param $formField\n * @param validation\n * @param errorText provides error validation message\n */\nfunction buildRequiredCheckboxValidation(validation, $formField, errorText) {\n    const formFieldId = $formField.attr('id');\n    const primarySelector = `#${formFieldId} input:first-of-type`;\n    const secondarySelector = `#${formFieldId} input`;\n\n    return {\n        selector: primarySelector,\n        triggeredBy: secondarySelector,\n        validate: (cb) => {\n            let result = false;\n\n            $(secondarySelector).each((index, checkbox) => {\n                if (checkbox.checked) {\n                    result = true;\n\n                    return false;\n                }\n            });\n\n            cb(result);\n        },\n        errorMessage: errorText,\n    };\n}\n\nfunction buildRequiredValidation(validation, selector, errorText) {\n    return {\n        selector,\n        validate(cb, val) {\n            cb(val.length > 0);\n        },\n        errorMessage: errorText,\n    };\n}\n\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\n    const min = Number(validation.min);\n    const max = Number(validation.max);\n\n    return {\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\n        validate: (cb, val) => {\n            const numberVal = Number(val);\n\n            cb(numberVal >= min && numberVal <= max);\n        },\n        errorMessage: invalidMessage,\n    };\n}\n\n\nfunction buildValidation($validateableElement, errorMessage) {\n    const validation = $validateableElement.data('validation');\n    const fieldValidations = [];\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\n\n    if (validation.type === 'datechooser') {\n        const dateValidation = buildDateValidation($validateableElement, validation);\n\n        if (dateValidation) {\n            fieldValidations.push(dateValidation);\n        }\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\n        fieldValidations.push(buildRequiredCheckboxValidation(validation, $validateableElement, errorMessage));\n    } else {\n        $validateableElement.find('input, select, textarea').each((index, element) => {\n            const $inputElement = $(element);\n            const tagName = $inputElement.get(0).tagName;\n            const inputName = $inputElement.attr('name');\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\n\n            if (validation.type === 'numberonly') {\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\n            }\n            if (validation.required) {\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector, errorMessage));\n            }\n        });\n    }\n\n    return fieldValidations;\n}\n\n/**\n * Builds the validation model for dynamic forms\n * @param $form\n * @param context provides access for error messages on required fields validation\n * @returns {Array}\n */\nexport default function ($form, context) {\n    let validationsToPerform = [];\n    const { field_not_blank: requiredFieldValidationText } = createTranslationDictionary(context);\n\n    $form.find('[data-validation]').each((index, input) => {\n        const getLabel = $el => $el.first().data('validation').label;\n        const requiredValidationMessage = getLabel($(input)) + requiredFieldValidationText;\n\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input), requiredValidationMessage));\n    });\n\n    return validationsToPerform;\n}\n"],"sourceRoot":""}